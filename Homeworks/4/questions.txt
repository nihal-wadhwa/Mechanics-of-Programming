Homework 4, Activity 1:  Learning to use Valgrind

Name: <<< Nihal Wadhwa >>>

Instructions
------------

These questions deal with the movie program found in movie.c, mtime.c and
movietest.c.  Compile these files as indicated in the assignment writeup.

We have included a compiled copy of the solution "goodmovietest" for you
to run to see how the program should behave.

The nature of these activities will have you switching back and forth
between running valgrind and looking at code. You may find it helpful to
have a second shell window open; run valgrind in the first window, and
execute other commands (such as 'more', or an editor) in the second window.

Questions
---------

1. Run "movietest" and observe its behavior

   a. When movietest is run without valgrind, what error is reported?

******************** Your answer below (5 points) ********************
There is no error
***********************************************************

   b. Is the behavior of movietest consistent, if you run it multiple
      times (e.g. 5 times)?

******************** Your answer below (4 points) ********************
It was consistent.
***********************************************************



2. You will now return to looking at the output of valgrind.  If you
   saved the errors in a file, you may look at that file.  Otherwise,
   run the valgrind command from the writeup again on movietest.

   Find the "LEAK SUMMARY" information at the end of the valgrind output.


   a. How many bytes of memory are reported lost?

******************** Your answer below (7 points) ********************
500 bytes
***********************************************************

   b. Find the "HEAP SUMMARY" section of the valgrind output.
   How many bytes of memory are in use when the program exited?

******************** Your answer below (7 points) ********************
500 bytes
***********************************************************

   c. Keep looking at the "HEAP SUMMARY".  How many allocation and
   deallocation calls were made?

******************** Your answer below (7 points) ********************
There are 60 allocation calls and 50 deallocation calls.
***********************************************************

3. The output from valgrind indicates many different errors, but most
   are caused by the same statements in the program being executed
   again and again.

   a. Look at all the different types of errors reported by valgrind.
      Notice that there are many invalid writes and invalid reads,
      and that each error lists the relevant stack frame information
      to find both where the error occurred and from where the
      nearby memory was allocated.

      What is the other type of error reported by valgrind for this program?

******************** Your answer below (7 points) ********************
Invalid free
***********************************************************

   b. Notice each of the reported errors include information leading to
   lines in the source file where malloc has been called (i.e., block
   allocations).   List all of the source lines where blocks are allocated:

******************** Your answer below (7 points) ********************
movie.c:105
movie.c:108
***********************************************************

   c. At what lines in the source file are the invalid read and write
      accesses to the memory blocks occurring? List the relevant information
      for the first three invalid writes and the first three invalid reads.

      Here is a small part of a correct response:
            The first invalid read is at moive.c:79.

******************** Your answer below (7 points) ********************
Write: movie.c:106, movie.c:109
Read: movie.c:79, movie.c:134, movie.c:80, movie.c:71, movie.c:72, movie.c:135
movie.c:106, movie.c:23, movie.c:24,
***********************************************************

   d. Your task is to find the source of these errors.  You may wish
   to review the file "movie.h" -- especially the structure definition.
   You should also look at the source code around the offending lines.
   This question may require thinking and contemplation.

   What is the likely cause of the invalid read/write errors?

******************** Your answer below (7 points) ********************
Improper malloc calls.
***********************************************************

Given the knowledge gained from the previous question, correct these
errors and then recompile and retest the program.  The invalid memory
access errors should no longer occur.

4. Run valgrind again. Notice that after the program output valgrind
   reports two occurrences of "Invalid free()".

   a. In what function do these errors occur, and how many times is
      that function called from main()?

******************** Your answer below (7 points) ********************
This occurs in the movieDelete function and this is called twice in the main function.
***********************************************************

   b. How many times is free() called from inside that function itself
      (i.e., not from any other functions it calls)?

******************** Your answer below (7 points) ********************
It is called five times.

***********************************************************

   c. What fix is needed to eliminate the "Invalid free()" message?

******************** Your answer below (7 points) ********************
Must add a free line to deallocate the memory of the movie pointer, not
just director and title.
***********************************************************

Make the fix you described, re-build and re-run the program.  The "Invalid
free" errors should no longer appear.

5. In the "HEAP SUMMARY" section, there are number of error reports
   regarding lost blocks of memory.

   a. In which functions were the calls to malloc() made which allocated
      the blocks that were lost, and what line numbers of what file?

******************** Your answer below (7 points) ********************
This was made in movieCopy function in line numbers 105 and 108.
***********************************************************

   b. Examine the code to determine what you need to change to fix each
      of the problems. Explain your solution.

******************** Your answer below (7 points) ********************
The blocks were allocated based on the sizeOf function which is incorrect.
It should have utilized the strlen function instead.
***********************************************************

   c. The memory allocated by these functions is returned by them to
      the calling function; this effectively transfers the responsibility
      for deallocating the memory to the caller as well.  Where is the
      most logical place for this memory to be deallocated?

******************** Your answer below (7 points) ********************
Heap.
***********************************************************

Make the necessary changes to the code to correct these final errors.
At this point, if you did your work correctly, your program should run
to completion with no memory management errors detected by valgrind.
